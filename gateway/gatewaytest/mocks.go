// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/abhinav/git-pr/gateway (interfaces: Git,GitHub)

package gatewaytest

import (
	context "context"
	gateway "github.com/abhinav/git-pr/gateway"
	github "github.com/google/go-github/github"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *_MockGitRecorder
}

// Recorder for MockGit (not exported)
type _MockGitRecorder struct {
	mock *MockGit
}

func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &_MockGitRecorder{mock}
	return mock
}

func (_m *MockGit) EXPECT() *_MockGitRecorder {
	return _m.recorder
}

func (_m *MockGit) Checkout(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Checkout", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) Checkout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Checkout", arg0)
}

func (_m *MockGit) CreateBranch(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CreateBranch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranch", arg0, arg1)
}

func (_m *MockGit) CreateBranchAndCheckout(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CreateBranchAndCheckout", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) CreateBranchAndCheckout(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBranchAndCheckout", arg0, arg1)
}

func (_m *MockGit) CurrentBranch() (string, error) {
	ret := _m.ctrl.Call(_m, "CurrentBranch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitRecorder) CurrentBranch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentBranch")
}

func (_m *MockGit) DeleteBranch(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteBranch", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) DeleteBranch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBranch", arg0)
}

func (_m *MockGit) DeleteRemoteTrackingBranch(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "DeleteRemoteTrackingBranch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) DeleteRemoteTrackingBranch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRemoteTrackingBranch", arg0, arg1)
}

func (_m *MockGit) DoesBranchExist(_param0 string) bool {
	ret := _m.ctrl.Call(_m, "DoesBranchExist", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockGitRecorder) DoesBranchExist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoesBranchExist", arg0)
}

func (_m *MockGit) Fetch(_param0 *gateway.FetchRequest) error {
	ret := _m.ctrl.Call(_m, "Fetch", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) Fetch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0)
}

func (_m *MockGit) Pull(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Pull", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pull", arg0, arg1)
}

func (_m *MockGit) Push(_param0 *gateway.PushRequest) error {
	ret := _m.ctrl.Call(_m, "Push", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) Push(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Push", arg0)
}

func (_m *MockGit) Rebase(_param0 *gateway.RebaseRequest) error {
	ret := _m.ctrl.Call(_m, "Rebase", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) Rebase(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rebase", arg0)
}

func (_m *MockGit) RemoteURL(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "RemoteURL", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitRecorder) RemoteURL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteURL", arg0)
}

func (_m *MockGit) ResetBranch(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "ResetBranch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitRecorder) ResetBranch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetBranch", arg0, arg1)
}

func (_m *MockGit) SHA1(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "SHA1", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitRecorder) SHA1(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SHA1", arg0)
}

// Mock of GitHub interface
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *_MockGitHubRecorder
}

// Recorder for MockGitHub (not exported)
type _MockGitHubRecorder struct {
	mock *MockGitHub
}

func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &_MockGitHubRecorder{mock}
	return mock
}

func (_m *MockGitHub) EXPECT() *_MockGitHubRecorder {
	return _m.recorder
}

func (_m *MockGitHub) DeleteBranch(_param0 context.Context, _param1 string) error {
	ret := _m.ctrl.Call(_m, "DeleteBranch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitHubRecorder) DeleteBranch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBranch", arg0, arg1)
}

func (_m *MockGitHub) GetBuildStatus(_param0 context.Context, _param1 string) (*gateway.BuildStatus, error) {
	ret := _m.ctrl.Call(_m, "GetBuildStatus", _param0, _param1)
	ret0, _ := ret[0].(*gateway.BuildStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitHubRecorder) GetBuildStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBuildStatus", arg0, arg1)
}

func (_m *MockGitHub) GetPullRequestPatch(_param0 context.Context, _param1 int) (string, error) {
	ret := _m.ctrl.Call(_m, "GetPullRequestPatch", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitHubRecorder) GetPullRequestPatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPullRequestPatch", arg0, arg1)
}

func (_m *MockGitHub) IsOwned(_param0 context.Context, _param1 *github.PullRequestBranch) bool {
	ret := _m.ctrl.Call(_m, "IsOwned", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockGitHubRecorder) IsOwned(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOwned", arg0, arg1)
}

func (_m *MockGitHub) ListPullRequestReviews(_param0 context.Context, _param1 int) ([]*gateway.PullRequestReview, error) {
	ret := _m.ctrl.Call(_m, "ListPullRequestReviews", _param0, _param1)
	ret0, _ := ret[0].([]*gateway.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitHubRecorder) ListPullRequestReviews(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPullRequestReviews", arg0, arg1)
}

func (_m *MockGitHub) ListPullRequestsByBase(_param0 context.Context, _param1 string) ([]*github.PullRequest, error) {
	ret := _m.ctrl.Call(_m, "ListPullRequestsByBase", _param0, _param1)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitHubRecorder) ListPullRequestsByBase(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPullRequestsByBase", arg0, arg1)
}

func (_m *MockGitHub) ListPullRequestsByHead(_param0 context.Context, _param1 string, _param2 string) ([]*github.PullRequest, error) {
	ret := _m.ctrl.Call(_m, "ListPullRequestsByHead", _param0, _param1, _param2)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitHubRecorder) ListPullRequestsByHead(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPullRequestsByHead", arg0, arg1, arg2)
}

func (_m *MockGitHub) SetPullRequestBase(_param0 context.Context, _param1 int, _param2 string) error {
	ret := _m.ctrl.Call(_m, "SetPullRequestBase", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitHubRecorder) SetPullRequestBase(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPullRequestBase", arg0, arg1, arg2)
}

func (_m *MockGitHub) SquashPullRequest(_param0 context.Context, _param1 *github.PullRequest) error {
	ret := _m.ctrl.Call(_m, "SquashPullRequest", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockGitHubRecorder) SquashPullRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SquashPullRequest", arg0, arg1)
}
