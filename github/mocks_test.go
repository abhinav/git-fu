// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/abhinav/git-pr/github (interfaces: GitService,PullRequestsService)

package github

import (
	context "context"
	github "github.com/google/go-github/github"
	gomock "github.com/golang/mock/gomock"
)

// Mock of GitService interface
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *_MockGitServiceRecorder
}

// Recorder for MockGitService (not exported)
type _MockGitServiceRecorder struct {
	mock *MockGitService
}

func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &_MockGitServiceRecorder{mock}
	return mock
}

func (_m *MockGitService) EXPECT() *_MockGitServiceRecorder {
	return _m.recorder
}

func (_m *MockGitService) DeleteRef(_param0 context.Context, _param1 string, _param2 string, _param3 string) (*github.Response, error) {
	ret := _m.ctrl.Call(_m, "DeleteRef", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitServiceRecorder) DeleteRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRef", arg0, arg1, arg2, arg3)
}

// Mock of PullRequestsService interface
type MockPullRequestsService struct {
	ctrl     *gomock.Controller
	recorder *_MockPullRequestsServiceRecorder
}

// Recorder for MockPullRequestsService (not exported)
type _MockPullRequestsServiceRecorder struct {
	mock *MockPullRequestsService
}

func NewMockPullRequestsService(ctrl *gomock.Controller) *MockPullRequestsService {
	mock := &MockPullRequestsService{ctrl: ctrl}
	mock.recorder = &_MockPullRequestsServiceRecorder{mock}
	return mock
}

func (_m *MockPullRequestsService) EXPECT() *_MockPullRequestsServiceRecorder {
	return _m.recorder
}

func (_m *MockPullRequestsService) Edit(_param0 context.Context, _param1 string, _param2 string, _param3 int, _param4 *github.PullRequest) (*github.PullRequest, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "Edit", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) Edit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Edit", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockPullRequestsService) GetRaw(_param0 context.Context, _param1 string, _param2 string, _param3 int, _param4 github.RawOptions) (string, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "GetRaw", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) GetRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRaw", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockPullRequestsService) List(_param0 context.Context, _param1 string, _param2 string, _param3 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "List", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0, arg1, arg2, arg3)
}

func (_m *MockPullRequestsService) ListReviews(_param0 context.Context, _param1 string, _param2 string, _param3 int) ([]*github.PullRequestReview, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "ListReviews", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) ListReviews(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListReviews", arg0, arg1, arg2, arg3)
}

func (_m *MockPullRequestsService) Merge(_param0 context.Context, _param1 string, _param2 string, _param3 int, _param4 string, _param5 *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "Merge", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(*github.PullRequestMergeResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) Merge(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Merge", arg0, arg1, arg2, arg3, arg4, arg5)
}
