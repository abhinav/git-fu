// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/abhinav/git-fu/service (interfaces: PR)

package servicetest

import (
	context "context"
	service "github.com/abhinav/git-fu/service"
	gomock "github.com/golang/mock/gomock"
)

// Mock of PR interface
type MockPR struct {
	ctrl     *gomock.Controller
	recorder *_MockPRRecorder
}

// Recorder for MockPR (not exported)
type _MockPRRecorder struct {
	mock *MockPR
}

func NewMockPR(ctrl *gomock.Controller) *MockPR {
	mock := &MockPR{ctrl: ctrl}
	mock.recorder = &_MockPRRecorder{mock}
	return mock
}

func (_m *MockPR) EXPECT() *_MockPRRecorder {
	return _m.recorder
}

func (_m *MockPR) Land(_param0 context.Context, _param1 *service.LandRequest) (*service.LandResponse, error) {
	ret := _m.ctrl.Call(_m, "Land", _param0, _param1)
	ret0, _ := ret[0].(*service.LandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPRRecorder) Land(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Land", arg0, arg1)
}

func (_m *MockPR) Rebase(_param0 context.Context, _param1 *service.RebaseRequest) (*service.RebaseResponse, error) {
	ret := _m.ctrl.Call(_m, "Rebase", _param0, _param1)
	ret0, _ := ret[0].(*service.RebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPRRecorder) Rebase(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rebase", arg0, arg1)
}
